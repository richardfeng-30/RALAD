=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
You are given some HLS pragma insertion examples.

Example 1: 
int i;
acc = 0;
Shift Accum Loop:
for (i = N − 1; i >= 0; i−−) {

Example 2: 
for (i = N − 1; i > 0; i−−) {
shift reg[i] = shift reg[i − 1];
}
shift reg[0] = x;
acc = 0;
MAC:

Example 3: 
N
−1
X

g[n] · e

−j2πkn
N

Optimize the following code by inserting pragma HLS lines.
void kernel_lu(int n,float A[120][120])
{
  int i;
  int j;
  int k;
{
    
    
    
    for (i = 0; i < 120; i++) {
      
      for (j = 0; j < i; j++) {
        for (k = 0; k < j; k++) {
          A[i][j] -= A[i][k] * A[k][j];
        }
        A[i][j] /= A[j][j];
      }
      
      for (j = i; j < 120; j++) {
        for (k = 0; k < i; k++) {
          A[i][j] -= A[i][k] * A[k][j];
        }
      }
    }
  }
}


=== LLAMA RESPONSE ===
Here is the optimized C code with HLS pragmas:

```c
void kernel_lu(int n, float A[120][120]) {
  #pragma HLS INTERFACE m_axi port=A[0] depth=120 dim=2
  #pragma HLS INTERFACE s_axilite port=n
  #pragma HLS INTERFACE s_axilite port=return

  int i;
  int j;
  int k;
  
  for (i = 0; i < 120; i++) {
    #pragma HLS LOOP_TRIPCOUNT min=1 max=120 avg=60
    #pragma HLS PIPELINE II=1
    for (j = 0; j < i; j++) {
      #pragma HLS LOOP_TRIPCOUNT min=1 max=119 avg=59
      for (k = 0; k < j; k++) {
        #pragma HLS UNROLL
        A[i][j] -= A[i][k] * A[k][j];
      }
      #pragma HLS PIPELINE II=1
      A[i][j] /= A[j][j];
    }
    
    for (j = i; j < 120; j++) {
      #pragma HLS LOOP_TRIPCOUNT min=1 max=81 avg=40
      #pragma HLS PIPELINE II=1
      for (k = 0; k < i; k++) {
        #pragma HLS UNROLL
        A[i][j] -= A[i][k] * A[k][j];
      }
    }
  }
}
```

In this code, I have added HLS pragmas to specify the interfaces, loop trip counts, and pipeline stages. The `#pragma HLS INTERFACE` directive specifies the interfaces for the function, including the AXI4-Stream interface for the 2D array `A` and the s_axilite interface for the scalar variables `n` and `return`. The `#pragma HLS LOOP_TRIPCOUNT` directive specifies the minimum, maximum, and average trip counts for each loop, which helps the HLS compiler to optimize the loop unrolling and pipelining. The `#pragma HLS UNROLL` directive specifies that the inner loop should be unrolled, which can improve the performance by reducing the number of loop iterations. The `#pragma HLS PIPELINE` directive specifies the pipeline stages for each loop, which can improve the throughput by increasing the number of pipeline stages.