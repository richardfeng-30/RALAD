=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
You are given some HLS pragma insertion examples.

Example 1: 
// Calculate matrix multiplication using local data buffer based on input size,
// and write results into local buffer for out
loop_count:
    for (int i = 0; i < rep_count; i++) {
    arraypart1:
        for (int row = 0; row < size; row++) {
#pragma HLS LOOP_TRIPCOUNT min = c_dim max = c_dim
        arraypart2:
            for (int col = 0; col < size; col++) {
#pragma HLS LOOP_TRIPCOUNT min = c_dim max = c_dim
            arraypart3:
                for (int j = 0; j < MAX_SIZE; j++) {
#pragma HLS LOOP_TRIPCOUNT min = c_dim max = c_dim
                    int result = (col == 0) ? 0 : temp_sum[j];
                    result += A[row][col] * B[col][j];
                    temp_sum[j] = result;
                    if (col == size - 1) C[row][j] = result;
                }
            }
        }
    }

Example 2: 
// Write out resulting row of C
    for (int m = 0; m < M; ++m) {
      #pragma HLS PIPELINE II=1
      C[n * M + m] = acc[m];
    }
  }
}



Example 6
This example plays with scaling up parallelism in a matrix multiplication example. We add two degrees of parallelism: horizontal vector parallelism, which consumes bandwidth, and pipeline parallelism, which consumes buffer space. In xilinx/Example6.cpp, rather than loading a single value of a before the inner M-loop, we load a higher (parametric) number of elements, allowing us to apply each of them to every value of B loaded. In xilinx/Example6_Vectorized.cpp, we additionally add vectorization, by replacing the primitive data types with vector types, and adjusting the loop bounds accordingly. The two files can be synthesized with make synthesize_example6 and make synthesize_example6_vectorized, respectively.

Example 3: 
// Burst write from output matrices to global memory
// Burst write from matrix C
writeC:
    for (int itr = 0, i = 0, j = 0; itr < dim * dim; itr++, j++) {
#pragma HLS LOOP_TRIPCOUNT min = c_dim* c_dim max = c_dim * c_dim
        if (j == dim) {
            j = 0;
            i++;
        }
        out_r[itr] = C[i * MAX_DIM + j];
    }
}


================================================================================
Example: Array/array_partition_complete
================================================================================
--- README ---
This is a simple example of matrix multiplication (Row x Col) to demonstrate complete array partitioning pragma in HLS

Running the Design using Vitis HLS (edit run_hls.tcl to set $hls_exec and enable specific run steps)
=========================================================
vitis-run --mode hls --tcl run_hls.tcl

Optimize the following code by inserting pragma HLS lines.
//Matrix-Vector Product and Transpose

void kernel_mvt(int n,float x1[120],float x2[120],float y_1[120],float y_2[120],float A[120][120])
{
  int i;
  int j;
{
    
    
    
    for (i = 0; i < 120; i++) {
      
      for (j = 0; j < 120; j++) {
        x1[i] = x1[i] + A[i][j] * y_1[j];
      }
    }
    
    
    
    for (i = 0; i < 120; i++) {
      
      for (j = 0; j < 120; j++) {
        x2[i] = x2[i] + A[j][i] * y_2[j];
      }
    }
  }
}


=== LLAMA RESPONSE ===
Here is the optimized code with HLS pragmas:

```c
void kernel_mvt(int n, float x1[120], float x2[120], float y_1[120], float y_2[120], float A[120][120]) {
  int i;
  int j;
  
  #pragma HLS INTERFACE m_axi port=x1 offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=x2 offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=y_1 offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=y_2 offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=A offset=slave bundle=gmem
  
  {
    #pragma HLS DATAFLOW
    //Matrix-Vector Product
    for (i = 0; i < 120; i++) {
      #pragma HLS LOOP_TRIPCOUNT min = 120 max = 120
      for (j = 0; j < 120; j++) {
        #pragma HLS LOOP_TRIPCOUNT min = 120 max = 120
        x1[i] = x1[i] + A[i][j] * y_1[j];
      }
    }
    
    //Transpose
    for (i = 0; i < 120; i++) {
      #pragma HLS LOOP_TRIPCOUNT min = 120 max = 120
      for (j = 0; j < 120; j++) {
        #pragma HLS LOOP_TRIPCOUNT min = 120 max = 120
        x2[i] = x2[i] + A[j][i] * y_2[j];
      }
    }
  }
}
```

Note: The pragmas are added to specify the interfaces, loop trip counts, and data flow. The `DATAFLOW` directive is used to specify that the kernel is a dataflow kernel, which can be executed in parallel. The `LOOP_TRIPCOUNT` directive is used to specify the minimum and maximum trip counts for each loop.