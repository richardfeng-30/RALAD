=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
You are given some HLS pragma insertion examples.

Example 1: 
void kernel(int *bank0, int *bank1, ...)
{
#pragma HLS alias ports=bank0,bank1 distance=bank_size

The ALIAS pragma can be specified using one of the following forms:
• Constant distance:
#pragma HLS alias ports=arr0,arr1,arr2,arr3 distance=1024

• Variable distance:
#pragma HLS alias ports=arr0,arr1,arr2,arr3 offset=0,512,1024,2048

Constraints:
• The depths of all the ports in the interface pragma must be the same
• All ports must be assigned to different bundles, bound to different HBM controllers
• The number of ports specified in the second form must be the same as the number of offsets
specified, one offset per port. #pragma HLS interface offset=off is not supported

Section II: HLS Programmers Guide
Chapter 8: Interfaces of the HLS Design

• Each port can only be used in one ALIAS pragma

Example 2: 
for (i = N − 1; i > 0; i−−) {
shift reg[i] = shift reg[i − 1];
}
shift reg[0] = x;
acc = 0;
MAC:

Example 3: 
int wi, wj;
if (i < 1 − outrow) wi = 1 − outrow;
else if (i >= MAX HEIGHT − outrow + 1) wi = MAX HEIGHT − outrow;
else wi = i;

Optimize the following code by inserting pragma HLS lines.

void kernel_floyd_warshall(int n,int path[180][180])
{
  int i;
  int j;
  int k;
{
    
    
    
    for (k = 0; k < 180; k++) {
      
      
      
      for (i = 0; i < 180; i++) {
        
        for (j = 0; j < 180; j++) {
          path[i][j] = (path[i][j] < path[i][k] + path[k][j]?path[i][j] : path[i][k] + path[k][j]);
        }
      }
    }
  }
}


=== LLAMA RESPONSE ===
Here is the optimized code with HLS pragmas:

```c
void kernel_floyd_warshall(int n, int path[180][180])
{
  #pragma HLS interface m_axi port = path[0] bundle = s_axi
  #pragma HLS dataflow

  int i;
  int j;
  int k;
  
  {
    #pragma HLS loop_tripcount min=1 max=180
    for (k = 0; k < 180; k++) {
      
      #pragma HLS loop_tripcount min=1 max=180
      for (i = 0; i < 180; i++) {
        
        #pragma HLS loop_tripcount min=1 max=180
        for (j = 0; j < 180; j++) {
          path[i][j] = (path[i][j] < path[i][k] + path[k][j]?path[i][j] : path[i][k] + path[k][j]);
        }
      }
    }
  }
}
```

Here's a brief explanation of the HLS pragmas used:

1. `#pragma HLS interface m_axi port = path[0] bundle = s_axi`: This directive specifies the interface for the `path` array, which is a 2D array. The `m_axi` interface is used to access the array, and `bundle = s_axi` specifies the AXI bundle to use.

2. `#pragma HLS dataflow`: This directive specifies that the function is a dataflow-oriented function, which means that it can be executed in parallel.

3. `#pragma HLS loop_tripcount min=1 max=180`: This directive specifies the trip count for each loop. The `min` and `max` values specify the minimum and maximum number of iterations for the loop, respectively. In this case, we know that the loops will iterate at least once and at most 180 times.

These pragmas help the HLS compiler to optimize the code for better performance and resource utilization.