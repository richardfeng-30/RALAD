=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
Optimize the following code by inserting pragma HLS lines. Before responding with any code, think step by step about the HLS optimizations that will improve performance and explain your reasoning. Finally, generate the C code with pragma HLS.


void kernel_doitgen(int nr,int nq,int np,float A[25][20][30],float C4[30][30],float sum[30])
{
  int r;
  int q;
  int p;
  int s;
{
    
    
    for (r = 0; r < 25; r++) {
      
      
      for (q = 0; q < 20; q++) {
        
        
        for (p = 0; p < 30; p++) {
          sum[p] = 0.0;
          for (s = 0; s < 30; s++) {
            sum[p] += A[r][q][s] * C4[s][p];
          }
        }
        for (p = 0; p < 30; p++) {
          A[r][q][p] = sum[p];
        }
      }
    }
  }
}


=== LLAMA RESPONSE ===
Here is the optimized code with HLS pragmas:

```c
void kernel_doitgen(int nr,int nq,int np,float A[25][20][30],float C4[30][30],float sum[30])
{
  #pragma HLS INTERFACE m_axi port=A offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=C4 offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=sum offset=slave bundle=gmem

  #pragma HLS INTERFACE s_axilite port=nr
  #pragma HLS INTERFACE s_axilite port=nq
  #pragma HLS INTERFACE s_axilite port=np

  #pragma HLS INTERFACE s_axilite port=return

  int r;
  int q;
  int p;
  int s;
{
    
    
    #pragma HLS LOOP_TRIPCOUNT min=25 max=25 avg=25
    for (r = 0; r < 25; r++) {
      
      
      #pragma HLS LOOP_TRIPCOUNT min=20 max=20 avg=20
      for (q = 0; q < 20; q++) {
        
        
        #pragma HLS LOOP_TRIPCOUNT min=30 max=30 avg=30
        for (p = 0; p < 30; p++) {
          sum[p] = 0.0;
          #pragma HLS LOOP_TRIPCOUNT min=30 max=30 avg=30
          for (s = 0; s < 30; s++) {
            sum[p] += A[r][q][s] * C4[s][p];
          }
        }
        #pragma HLS LOOP_TRIPCOUNT min=30 max=30 avg=30
        for (p = 0; p < 30; p++) {
          A[r][q][p] = sum[p];
        }
      }
    }
  }
}
```

Explanation of HLS optimizations:

1.  **Interface Pragmas**: The HLS pragmas `#pragma HLS INTERFACE` are used to specify the interfaces for the functions. In this case, we have specified the AXI interfaces for the input and output arrays, as well as the scalar inputs and outputs.

2.  **Loop Pragmas**: The HLS pragmas `#pragma HLS LOOP_TRIPCOUNT` are used to specify the trip count for each loop. This information is used by the HLS compiler to optimize the loop. In this case, we have specified the trip count for each loop to be the maximum possible value, which is 25 for the outer loop, 20 for the middle loop, and 30 for the inner loop.

3.  **Memory Pragmas**: The HLS pragmas `#pragma HLS INTERFACE m_axi` are used to specify the memory interface for the arrays. In this case, we have specified the AXI memory interface for the arrays A, C4, and sum.

By using these HLS pragmas, we can optimize the code for better performance on an FPGA. The HLS compiler can use this information to generate more efficient code, such as pipelining the loops or using parallelism to improve performance.