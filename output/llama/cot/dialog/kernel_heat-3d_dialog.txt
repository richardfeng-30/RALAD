=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
Optimize the following code by inserting pragma HLS lines. Before responding with any code, think step by step about the HLS optimizations that will improve performance and explain your reasoning. Finally, generate the C code with pragma HLS.


void kernel_heat_3d(int tsteps,int n,float A[20][20][20],float B[20][20][20])
{
  int t;
  int i;
  int j;
  int k;
{
    
    
    
    for (t = 1; t <= 40; t++) {
      
      
      for (i = 1; i < 20 - 1; i++) {
        
        
        for (j = 1; j < 20 - 1; j++) {
          for (k = 1; k < 20 - 1; k++) {
            B[i][j][k] = 0.125 * (A[i + 1][j][k] - 2.0 * A[i][j][k] + A[i - 1][j][k]) + 0.125 * (A[i][j + 1][k] - 2.0 * A[i][j][k] + A[i][j - 1][k]) + 0.125 * (A[i][j][k + 1] - 2.0 * A[i][j][k] + A[i][j][k - 1]) + A[i][j][k];
          }
        }
      }
      
      
      for (i = 1; i < 20 - 1; i++) {
        
        
        for (j = 1; j < 20 - 1; j++) {
          for (k = 1; k < 20 - 1; k++) {
            A[i][j][k] = 0.125 * (B[i + 1][j][k] - 2.0 * B[i][j][k] + B[i - 1][j][k]) + 0.125 * (B[i][j + 1][k] - 2.0 * B[i][j][k] + B[i][j - 1][k]) + 0.125 * (B[i][j][k + 1] - 2.0 * B[i][j][k] + B[i][j][k - 1]) + B[i][j][k];
          }
        }
      }
    }
  }
}


=== LLAMA RESPONSE ===
The given code is a heat transfer simulation in 3D using finite differences. The code is a simple implementation of the heat equation. To optimize this code for FPGA acceleration using HLS, we need to identify the loops and optimize them for parallelism and pipelining.

The outer loop `t` can be unrolled to reduce the number of iterations. The inner loops `i`, `j`, and `k` can be parallelized using OpenMP or OpenACC. The memory access pattern is regular and can be optimized using `#pragma HLS pipeline` and `#pragma HLS array_partition`.

Here's the optimized code with HLS pragmas:

```c
void kernel_heat_3d(int tsteps,int n,float A[20][20][20],float B[20][20][20])
{
    #pragma HLS interface m_axi port=A[0] bundle=gmem
    #pragma HLS interface m_axi port=B[0] bundle=gmem

    int t;
    int i;
    int j;
    int k;

    #pragma HLS dataflow

    for (t = 1; t <= 40; t++) {
        #pragma HLS loop_tripcount min=40 max=40
        #pragma HLS pipeline II=1

        for (i = 1; i < 20 - 1; i++) {
            #pragma HLS loop_tripcount min=19 max=19
            #pragma HLS pipeline II=1

            for (j = 1; j < 20 - 1; j++) {
                #pragma HLS loop_tripcount min=19 max=19
                #pragma HLS pipeline II=1

                for (k = 1; k < 20 - 1; k++) {
                    #pragma HLS pipeline II=1

                    B[i][j][k] = 0.125 * (A[i + 1][j][k] - 2.0 * A[i][j][k] + A[i - 1][j][k]) + 0.125 * (A[i][j + 1][k] - 2.0 * A[i][j][k] + A[i][j - 1][k]) + 0.125 * (A[i][j][k + 1] - 2.0 * A[i][j][k] + A[i][j][k - 1]) + A[i][j][k];
                }
            }
        }

        for (i = 1; i < 20 - 1; i++) {
            #pragma HLS loop_tripcount min=19 max=19
            #pragma HLS pipeline II=1

            for (j = 1; j < 20 - 1; j++) {
                #pragma HLS loop_tripcount min=19 max=19
                #pragma HLS pipeline II=1

                for (k = 1; k < 20 - 1; k++) {
                    #pragma HLS pipeline II=1

                    A[i][j][k] = 0.125 * (B[i + 1][j][k] - 2.0 * B[i][j][k] + B[i - 1][j][k]) + 0.125 * (B[i][j + 1][k] - 2.0 * B[i][j][k] + B[i][j - 1][k]) + 0.125 * (B[i][j][k + 1] - 2.0 * B[i][j][k] + B[i][j][k - 1]) + B[i][j][k];
                }
            }
        }
    }
}
```

In this optimized code, we have added HLS pragmas to specify the loop bounds, pipeline the loops, and optimize the memory access. The `#pragma HLS dataflow` directive specifies that the function is a dataflow-oriented function, which is suitable for FPGA acceleration. The `#pragma HLS interface` directive specifies the interfaces for the memory-mapped arrays `A` and `B`. The `#pragma HLS loop_tripcount` directive specifies the minimum and maximum number of iterations for each loop, which helps the HLS compiler to optimize the loop. The `#pragma HLS pipeline` directive specifies the pipeline depth for each loop, which helps to optimize the memory access and improve the performance.