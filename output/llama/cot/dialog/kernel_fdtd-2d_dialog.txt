=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
Optimize the following code by inserting pragma HLS lines. Before responding with any code, think step by step about the HLS optimizations that will improve performance and explain your reasoning. Finally, generate the C code with pragma HLS.


void kernel_fdtd_2d(int tmax,int nx,int ny,float ex[60][80],float ey[60][80],float hz[60][80],float _fict_[40])
{
  int t;
  int i;
  int j;
{
    
    
    
    for (t = 0; t < 40; t++) {
      
      for (j = 0; j < 80; j++) {
        ey[0][j] = _fict_[t];
      }
      
      
      
      for (i = 1; i < 60; i++) {
        
        for (j = 0; j < 80; j++) {
          ey[i][j] = ey[i][j] - 0.5 * (hz[i][j] - hz[i - 1][j]);
        }
      }
      
      
      
      for (i = 0; i < 60; i++) {
        
        for (j = 1; j < 80; j++) {
          ex[i][j] = ex[i][j] - 0.5 * (hz[i][j] - hz[i][j - 1]);
        }
      }
      
      
      
      for (i = 0; i < 60 - 1; i++) {
        
        for (j = 0; j < 80 - 1; j++) {
          hz[i][j] = hz[i][j] - 0.7 * (ex[i][j + 1] - ex[i][j] + ey[i + 1][j] - ey[i][j]);
        }
      }
    }
  }
}


=== LLAMA RESPONSE ===
Here's a step-by-step explanation of the HLS optimizations that can be applied to the given code:

1.  **Interface Optimization**: The code contains several arrays (ex, ey, hz) that are accessed frequently. To optimize these accesses, we can use the `#pragma HLS interface` directive to specify the interface type and the corresponding array.

2.  **Loop Optimization**: The code contains several nested loops (for, for) that can be optimized using the `#pragma HLS loop` directive. We can specify the loop type (unroll, pipelined, etc.) and the number of iterations to optimize the loop.

3.  **Memory Optimization**: The code accesses arrays (ex, ey, hz) frequently, which can lead to memory access issues. To optimize memory access, we can use the `#pragma HLS array` directive to specify the array type and the corresponding array.

Here's the optimized C code with pragma HLS:

```c
#include <ap_int.h>

void kernel_fdtd_2d(int tmax, int nx, int ny, float ex[60][80], float ey[60][80], float hz[60][80], float _fict_[40])
{
    #pragma HLS interface m_axi port = ex[0] depth = 2400
    #pragma HLS interface m_axi port = ey[0] depth = 2400
    #pragma HLS interface m_axi port = hz[0] depth = 2400

    int t;
    int i;
    int j;

    #pragma HLS dataflow
    for (t = 0; t < 40; t++) {
        #pragma HLS pipeline II = 1
        for (j = 0; j < 80; j++) {
            ey[0][j] = _fict_[t];
        }

        for (i = 1; i < 60; i++) {
            #pragma HLS unroll factor = 4
            for (j = 0; j < 80; j++) {
                ey[i][j] = ey[i][j] - 0.5 * (hz[i][j] - hz[i - 1][j]);
            }
        }

        for (i = 0; i < 60; i++) {
            #pragma HLS unroll factor = 4
            for (j = 1; j < 80; j++) {
                ex[i][j] = ex[i][j] - 0.5 * (hz[i][j] - hz[i][j - 1]);
            }
        }

        for (i = 0; i < 60 - 1; i++) {
            #pragma HLS unroll factor = 4
            for (j = 0; j < 80 - 1; j++) {
                hz[i][j] = hz[i][j] - 0.7 * (ex[i][j + 1] - ex[i][j] + ey[i + 1][j] - ey[i][j]);
            }
        }
    }
}
```

In this optimized code, we've added the following pragmas:

*   `#pragma HLS interface m_axi` to specify the interface type and the corresponding array.
*   `#pragma HLS dataflow` to specify the dataflow execution mode.
*   `#pragma HLS pipeline II = 1` to specify the pipeline depth.
*   `#pragma HLS unroll factor = 4` to specify the unrolling factor for the loops.

These pragmas can help optimize the code for better performance on an FPGA.