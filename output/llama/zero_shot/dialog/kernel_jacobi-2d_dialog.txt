=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
Optimize the following code by inserting pragma HLS lines.
void kernel_jacobi_2d(int tsteps,int n,float A[90][90],float B[90][90])
{
  int t;
  int i;
  int j;
{
    
    
    
    for (t = 0; t < 40; t++) {
      
      
      
      for (i = 1; i < 90 - 1; i++) {
        
        for (j = 1; j < 90 - 1; j++) {
          B[i][j] = 0.2 * (A[i][j] + A[i][j - 1] + A[i][1 + j] + A[1 + i][j] + A[i - 1][j]);
        }
      }
      
      
      
      for (i = 1; i < 90 - 1; i++) {
        
        for (j = 1; j < 90 - 1; j++) {
          A[i][j] = 0.2 * (B[i][j] + B[i][j - 1] + B[i][1 + j] + B[1 + i][j] + B[i - 1][j]);
        }
      }
    }
  }
}


=== LLAMA RESPONSE ===
Here is the optimized code with HLS pragmas:

```c
void kernel_jacobi_2d(int tsteps,int n,float A[90][90],float B[90][90])
{
  #pragma HLS INTERFACE m_axi port=A offset=slave
  #pragma HLS INTERFACE m_axi port=B offset=slave
  #pragma HLS INTERFACE s_axilite port=tsteps
  #pragma HLS INTERFACE s_axilite port=n
  #pragma HLS INTERFACE s_axilite port=t
  #pragma HLS INTERFACE s_axilite port=i
  #pragma HLS INTERFACE s_axilite port=j
  
  #pragma HLS DATAFLOW
  
  #pragma HLS LOOP_TRIPCOUNT min=40 max=40
  #pragma HLS LOOP_TRIPCOUNT min=89 max=89
  #pragma HLS LOOP_TRIPCOUNT min=89 max=89
  
  int t;
  int i;
  int j;
  {
    for (t = 0; t < 40; t++) {
      #pragma HLS LOOP_TRIPCOUNT min=40 max=40
      #pragma HLS UNROLL
      for (i = 1; i < 90 - 1; i++) {
        #pragma HLS LOOP_TRIPCOUNT min=89 max=89
        #pragma HLS UNROLL
        for (j = 1; j < 90 - 1; j++) {
          B[i][j] = 0.2 * (A[i][j] + A[i][j - 1] + A[i][1 + j] + A[1 + i][j] + A[i - 1][j]);
        }
      }
      
      for (i = 1; i < 90 - 1; i++) {
        #pragma HLS LOOP_TRIPCOUNT min=89 max=89
        #pragma HLS UNROLL
        for (j = 1; j < 90 - 1; j++) {
          A[i][j] = 0.2 * (B[i][j] + B[i][j - 1] + B[i][1 + j] + B[1 + i][j] + B[i - 1][j]);
        }
      }
    }
  }
}
```

Note: The pragmas used are:

1. `#pragma HLS INTERFACE`: This is used to specify the interfaces for the kernel. In this case, we have used `m_axi` for the 2D arrays and `s_axilite` for the scalar variables.

2. `#pragma HLS DATAFLOW`: This is used to specify that the kernel is a dataflow kernel. This is useful for kernels that have no dependencies between iterations.

3. `#pragma HLS LOOP_TRIPCOUNT`: This is used to specify the minimum and maximum number of iterations for a loop. This is useful for kernels that have variable iteration counts.

4. `#pragma HLS UNROLL`: This is used to specify that a loop should be unrolled. This can be useful for kernels that have small iteration counts.

The pragmas `#pragma HLS LOOP_TRIPCOUNT` and `#pragma HLS UNROLL` are used to guide the HLS compiler in its optimization decisions.