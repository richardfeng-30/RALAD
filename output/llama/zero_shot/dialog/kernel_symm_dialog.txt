=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
Optimize the following code by inserting pragma HLS lines.
void kernel_symm(int m,int n,float alpha,float beta,float C[60][80],float A[60][60],float B[60][80])
{
  float temp2;
  int i;
  int j;
  int k;
  
//BLAS PARAMS
//SIDE = 'L'
//UPLO = 'L'
// =>  Form  C := alpha*A*B + beta*C
// A is MxM
// B is MxN
// C is MxN
//note that due to Fortran array layout, the code below more closely resembles upper triangular case in BLAS
{
    
    
    
    for (i = 0; i < 60; i++) {
      
      
      
      for (j = 0; j < 80; j++) {
        temp2 = ((float )0);
        for (k = 0; k < i; k++) {
          C[k][j] += alpha * B[i][j] * A[i][k];
          temp2 += B[k][j] * A[i][k];
        }
        C[i][j] = beta * C[i][j] + alpha * B[i][j] * A[i][i] + alpha * temp2;
      }
    }
  }
}


=== LLAMA RESPONSE ===
Here is the optimized code with HLS pragmas:
```c
void kernel_symm(int m, int n, float alpha, float beta, float C[60][80], float A[60][60], float B[60][80]) {
  #pragma HLS INTERFACE m_axi port=C offset=slave
  #pragma HLS INTERFACE m_axi port=A offset=slave
  #pragma HLS INTERFACE m_axi port=B offset=slave
  #pragma HLS INTERFACE s_axli port=m
  #pragma HLS INTERFACE s_axli port=n
  #pragma HLS INTERFACE s_axli port=alpha
  #pragma HLS INTERFACE s_axli port=beta

  float temp2;
  int i;
  int j;
  int k;

  #pragma HLS DATAFLOW

  #pragma HLS PIPELINE II=1
  for (i = 0; i < 60; i++) {
    #pragma HLS LOOP_TRIPCOUNT min=60 max=60
    for (j = 0; j < 80; j++) {
      temp2 = ((float)0);
      #pragma HLS LOOP_TRIPCOUNT min=80 max=80
      for (k = 0; k < i; k++) {
        #pragma HLS UNROLL
        C[k][j] += alpha * B[i][j] * A[i][k];
        temp2 += B[k][j] * A[i][k];
      }
      #pragma HLS UNROLL
      C[i][j] = beta * C[i][j] + alpha * B[i][j] * A[i][i] + alpha * temp2;
    }
  }
}
```
Here's a brief explanation of the HLS pragmas used:

* `#pragma HLS INTERFACE m_axi`: specifies the memory interface for each port.
* `#pragma HLS DATAFLOW`: enables dataflow scheduling for the kernel.
* `#pragma HLS PIPELINE II=1`: specifies a pipeline with a latency of 1 clock cycle.
* `#pragma HLS LOOP_TRIPCOUNT`: specifies the minimum and maximum number of iterations for each loop.
* `#pragma HLS UNROLL`: specifies the unrolling factor for each loop.
* `#pragma HLS LOOP_TRIPCOUNT min=60 max=60` and `#pragma HLS LOOP_TRIPCOUNT min=80 max=80`: specify the trip counts for the inner loops.
* `#pragma HLS UNROLL` and `#pragma HLS UNROLL`: specify the unrolling factor for the inner loops.

Note that the HLS pragmas are used to optimize the kernel for hardware acceleration, and the specific pragmas used may vary depending on the target hardware and the desired level of optimization.