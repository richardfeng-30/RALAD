=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
Optimize the following code by inserting pragma HLS lines.

void kernel_gemver(int n,float alpha,float beta,float A[120][120],float u1[120],float v1[120],float u2[120],float v2[120],float w[120],float x[120],float y[120],float z[120])
{
  int i;
  int j;
{
    
    
    
    for (i = 0; i < 120; i++) {
      
      for (j = 0; j < 120; j++) {
        A[i][j] = A[i][j] + u1[i] * v1[j] + u2[i] * v2[j];
      }
    }
    
    
    
    for (i = 0; i < 120; i++) {
      
      for (j = 0; j < 120; j++) {
        x[i] = x[i] + beta * A[j][i] * y[j];
      }
    }
    
    for (i = 0; i < 120; i++) {
      x[i] = x[i] + z[i];
    }
    
    
    
    for (i = 0; i < 120; i++) {
      
      for (j = 0; j < 120; j++) {
        w[i] = w[i] + alpha * A[i][j] * x[j];
      }
    }
  }
}


=== LLAMA RESPONSE ===
Here is the optimized code with HLS pragmas:

```c
void kernel_gemver(int n,float alpha,float beta,float A[120][120],float u1[120],float v1[120],float u2[120],float v2[120],float w[120],float x[120],float y[120],float z[120])
{
  #pragma HLS INTERFACE m_axi port=A offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=u1 offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=v1 offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=u2 offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=v2 offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=w offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=x offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=y offset=slave bundle=gmem
  #pragma HLS INTERFACE m_axi port=z offset=slave bundle=gmem
  #pragma HLS INTERFACE s_axli port=alpha
  #pragma HLS INTERFACE s_axli port=beta
  #pragma HLS INTERFACE s_axli port=n
  #pragma HLS INTERFACE s_axli port=result offset=slave bundle=s_axi
  
  #pragma HLS DATAFLOW
  
  #pragma HLS loop_tripcount min=1 max=120
  for (int i = 0; i < 120; i++) {
    #pragma HLS loop_tripcount min=1 max=120
    for (int j = 0; j < 120; j++) {
      A[i][j] = A[i][j] + u1[i] * v1[j] + u2[i] * v2[j];
    }
  }
  
  #pragma HLS loop_tripcount min=1 max=120
  for (int i = 0; i < 120; i++) {
    #pragma HLS loop_tripcount min=1 max=120
    for (int j = 0; j < 120; j++) {
      x[i] = x[i] + beta * A[j][i] * y[j];
    }
  }
  
  #pragma HLS loop_tripcount min=1 max=120
  for (int i = 0; i < 120; i++) {
    x[i] = x[i] + z[i];
  }
  
  #pragma HLS loop_tripcount min=1 max=120
  for (int i = 0; i < 120; i++) {
    #pragma HLS loop_tripcount min=1 max=120
    for (int j = 0; j < 120; j++) {
      w[i] = w[i] + alpha * A[i][j] * x[j];
    }
  }
}
```

In this code, I have added pragmas for interfaces, loops, and memory optimization. The pragmas `#pragma HLS INTERFACE` are used to specify the interfaces for the function, which are the memory-mapped arrays and the scalar inputs. The pragmas `#pragma HLS DATAFLOW` are used to specify that the function is a dataflow-oriented function, which means that it can be executed in parallel. The pragmas `#pragma HLS loop_tripcount` are used to specify the trip count for each loop, which is the number of iterations that the loop will perform. This information can be used by the HLS compiler to optimize the code for parallel execution.