=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
Optimize the following code by inserting pragma HLS lines.

void kernel_doitgen(int nr,int nq,int np,float A[25][20][30],float C4[30][30],float sum[30])
{
  int r;
  int q;
  int p;
  int s;
{
    
    
    for (r = 0; r < 25; r++) {
      
      
      for (q = 0; q < 20; q++) {
        
        
        for (p = 0; p < 30; p++) {
          sum[p] = 0.0;
          for (s = 0; s < 30; s++) {
            sum[p] += A[r][q][s] * C4[s][p];
          }
        }
        for (p = 0; p < 30; p++) {
          A[r][q][p] = sum[p];
        }
      }
    }
  }
}


=== LLAMA RESPONSE ===
Here is the optimized code with HLS pragmas:

```c
void kernel_doitgen(int nr, int nq, int np, float A[25][20][30], float C4[30][30], float sum[30])
{
    #pragma HLS INTERFACE m_axis port=A offset=slave bundle=gmem
    #pragma HLS INTERFACE m_axis port=C4 offset=slave bundle=gmem
    #pragma HLS INTERFACE m_axis port=sum offset=slave bundle=gmem

    #pragma HLS INTERFACE s_axilite port=nr bundle=control
    #pragma HLS INTERFACE s_axilite port=nq bundle=control
    #pragma HLS INTERFACE s_axilite port=np bundle=control
    #pragma HLS INTERFACE s_axilite port=return bundle=control

    int r;
    int q;
    int p;
    int s;

    #pragma HLS DATAFLOW

    #pragma HLS PIPELINE II=1

    for (r = 0; r < 25; r++) {
        #pragma HLS LOOP_TRIPCOUNT min=25 max=25
        #pragma HLS UNROLL factor=1

        for (q = 0; q < 20; q++) {
            #pragma HLS LOOP_TRIPCOUNT min=20 max=20
            #pragma HLS UNROLL factor=1

            for (p = 0; p < 30; p++) {
                #pragma HLS LOOP_TRIPCOUNT min=30 max=30
                #pragma HLS UNROLL factor=1

                sum[p] = 0.0;
                for (s = 0; s < 30; s++) {
                    #pragma HLS LOOP_TRIPCOUNT min=30 max=30
                    #pragma HLS UNROLL factor=1

                    sum[p] += A[r][q][s] * C4[s][p];
                }
            }
            for (p = 0; p < 30; p++) {
                #pragma HLS LOOP_TRIPCOUNT min=30 max=30
                #pragma HLS UNROLL factor=1

                A[r][q][p] = sum[p];
            }
        }
    }
}
```

The pragmas used are:
- `#pragma HLS INTERFACE` to specify the interfaces for the function.
- `#pragma HLS DATAFLOW` to indicate that the function can be executed in a dataflow manner.
- `#pragma HLS PIPELINE` to specify the pipeline depth.
- `#pragma HLS LOOP_TRIPCOUNT` to specify the minimum and maximum trip counts for a loop.
- `#pragma HLS UNROLL` to specify the unrolling factor for a loop.