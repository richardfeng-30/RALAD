=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
Optimize the following code by inserting pragma HLS lines.
void kernel_lu(int n,float A[120][120])
{
  int i;
  int j;
  int k;
{
    
    
    
    for (i = 0; i < 120; i++) {
      
      for (j = 0; j < i; j++) {
        for (k = 0; k < j; k++) {
          A[i][j] -= A[i][k] * A[k][j];
        }
        A[i][j] /= A[j][j];
      }
      
      for (j = i; j < 120; j++) {
        for (k = 0; k < i; k++) {
          A[i][j] -= A[i][k] * A[k][j];
        }
      }
    }
  }
}


=== LLAMA RESPONSE ===
Here is the optimized code with HLS pragmas:

```c
void kernel_lu(int n, float A[120][120]) {
  #pragma HLS interface m_axi port=A[0] depth=120 dim1=120 dim2=120
  #pragma HLS interface m_axi port=A[1] depth=120 dim1=120 dim2=120
  
  int i;
  int j;
  int k;
  
  for (i = 0; i < 120; i++) {
    #pragma HLS loop_tripcount min=120 max=120 avg=120
    for (j = 0; j < i; j++) {
      #pragma HLS loop_tripcount min=120 max=120 avg=120
      for (k = 0; k < j; k++) {
        #pragma HLS pipeline II=1
        A[i][j] -= A[i][k] * A[k][j];
      }
      #pragma HLS pipeline II=1
      A[i][j] /= A[j][j];
    }
    
    for (j = i; j < 120; j++) {
      #pragma HLS loop_tripcount min=120 max=120 avg=120
      for (k = 0; k < i; k++) {
        #pragma HLS pipeline II=1
        A[i][j] -= A[i][k] * A[k][j];
      }
    }
  }
}
```

The pragmas used are:

1. `#pragma HLS interface m_axi`: This directive is used to specify the memory interface for the kernel. In this case, we are using a 2D array `A` with dimensions 120x120.

2. `#pragma HLS loop_tripcount`: This directive is used to specify the expected trip count of a loop. In this case, we are specifying the minimum, maximum, and average trip counts for each loop.

3. `#pragma HLS pipeline II=1`: This directive is used to specify the pipeline II (iteration interval) for a loop. In this case, we are specifying a pipeline II of 1 for each inner loop, which means that the loop will be executed in a pipelined manner.