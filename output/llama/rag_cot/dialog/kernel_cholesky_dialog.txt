=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
You are given some HLS pragma insertion examples.

Example 1: 
for k = 0, . . . , N − 1

(5.13)

n=0

We can divide this equation into two parts, one that sums the even components and one that
sums the odd components.
N/2−1

N/2−1

G[k] =

X

g[2n] · e

−j2πk(2n)
N

+

n=0

X

g[2n + 1] · e

−j2πk(2n+1)
N

(5.14)

n=0

The first part of this equation deals with the even inputs, hence the 2n terms in both g[] and in
the exponent of e. The second part corresponds to the odd inputs with 2n + 1 in both places. Also
note that the sums now go to N/2 − 1 in both cases which should make sense since we have divided
them into two halves.
We transform Equation 5.14 to the following:
N/2−1

G[k] =

X
n=0

g[2n] · e

−j2πkn
N/2

N/2−1

+

X
n=0

103

g[2n + 1] · e

−j2πk(2n)
N

·e

−j2πk
N

(5.15)

FAST FOURIER TRANSFORM

Example 2: 
n−1
Y

Ki =

i=0

n−1
Y
i=0

√

1
1 + 2−2i

(3.24)

and
K = lim K(n) ≈ 0.6072529350088812561694
n→∞

(3.25)

The scaling factors for different iterations can be calculated in advance and stored in a table. If we
always perform a fixed number of rotations, this is simply one constant. This correction could also
be made in advance by scaling v0 appropriately before performing the rotations. Sometimes it is
ok to ignore this scaling, which results in a processing gain
n−1

A=

Yp
1
= lim
1 + 2−2i ≈ 1.64676025812107
n→∞
K

(3.26)

i=0

Example 3: 
for (i = N − 1; i > 0; i−−) {
shift reg[i] = shift reg[i − 1];
}
shift reg[0] = x;
acc = 0;
MAC:

Optimize the following code by inserting pragma HLS lines. Before responding with any code, think step by step about the HLS optimizations that will improve performance and explain your reasoning. Finally, generate the C code with pragma HLS.
#include <math.h>


void kernel_cholesky(int n,float A[120][120])
{
  int i;
  int j;
  int k;
{
    
    
    
    for (i = 0; i < 120; i++) {
//j<i
      
      for (j = 0; j < i; j++) {
        for (k = 0; k < j; k++) {
          A[i][j] -= A[i][k] * A[j][k];
        }
        A[i][j] /= A[j][j];
      }
// i==j case
      for (k = 0; k < i; k++) {
        A[i][i] -= A[i][k] * A[i][k];
      }
      A[i][i] = sqrt(A[i][i]);
    }
  }
}


=== LLAMA RESPONSE ===
The given code is a Cholesky decomposition algorithm, which is a part of the LU decomposition algorithm. This algorithm is used to decompose a symmetric positive-definite matrix into a lower triangular matrix and its transpose.

To optimize this code for HLS, we can use the following pragmas:

1.  `#pragma HLS pipeline II=1` to enable pipelining, which allows the compiler to break the loop into multiple stages, each stage processing one iteration of the loop. This can improve the throughput of the code.

2.  `#pragma HLS loop_flatten` to flatten the nested loops into a single loop, which can improve the performance of the code.

3.  `#pragma HLS array_partition` to partition the arrays into smaller chunks, which can improve the memory access patterns and reduce the memory bandwidth.

4.  `#pragma HLS dataflow` to enable dataflow execution, which allows the compiler to execute the code in a dataflow manner, where each statement is executed as soon as its inputs are available.

Here is the optimized code with HLS pragmas:

```c
#include <math.h>
#include <ap_fixed.h>

void kernel_cholesky(int n, float A[120][120])
{
    #pragma HLS dataflow
    #pragma HLS array_partition variable=A cyclic factor=4

    int i;
    int j;
    int k;

    for (i = 0; i < 120; i++) {
        #pragma HLS loop_flatten
        #pragma HLS pipeline II=1

        for (j = 0; j < i; j++) {
            for (k = 0; k < j; k++) {
                A[i][j] -= A[i][k] * A[j][k];
            }
            A[i][j] /= A[j][j];
        }

        // i==j case
        for (k = 0; k < i; k++) {
            A[i][i] -= A[i][k] * A[i][k];
        }
        A[i][i] = sqrt(A[i][i]);
    }
}
```

In this optimized code, the `#pragma HLS dataflow` directive enables dataflow execution, and the `#pragma HLS array_partition` directive partitions the array `A` into smaller chunks. The `#pragma HLS loop_flatten` directive flattens the nested loops into a single loop, and the `#pragma HLS pipeline II=1` directive enables pipelining with a pipeline depth of 1.