=== SYSTEM ===
Always answer with optimized C code including HLS pragmas. Add appropriate #pragma HLS directives for interfaces, loops, and memory optimization.

=== USER QUERY ===
You are given some HLS pragma insertion examples.

Example 1: 
for k = 0, . . . , N − 1

(5.13)

n=0

We can divide this equation into two parts, one that sums the even components and one that
sums the odd components.
N/2−1

N/2−1

G[k] =

X

g[2n] · e

−j2πk(2n)
N

+

n=0

X

g[2n + 1] · e

−j2πk(2n+1)
N

(5.14)

n=0

The first part of this equation deals with the even inputs, hence the 2n terms in both g[] and in
the exponent of e. The second part corresponds to the odd inputs with 2n + 1 in both places. Also
note that the sums now go to N/2 − 1 in both cases which should make sense since we have divided
them into two halves.
We transform Equation 5.14 to the following:
N/2−1

G[k] =

X
n=0

g[2n] · e

−j2πkn
N/2

N/2−1

+

X
n=0

103

g[2n + 1] · e

−j2πk(2n)
N

·e

−j2πk
N

(5.15)

FAST FOURIER TRANSFORM

Example 2: 
G[k] =

X
n=0

g[2n] · e

−j2πkn
N/2

N/2−1

+

X
n=0

103

g[2n + 1] · e

−j2πk(2n)
N

·e

−j2πk
N

(5.15)

FAST FOURIER TRANSFORM

In the first summation (even inputs), we simply move the 2 into the denominator so that it is
now N/2. The second summation (odd inputs) uses the power rule to separate the +1 leaving two
complex exponentials. We can further modify this equation to
N/2−1

G[k] =

X

N/2−1

−j2πkn

g[2n] · e N/2 + e

−j2πk
N

·

n=0

X

−j2πkn

g[2n + 1] · e N/2

(5.16)

n=0

Here we only modify the second summation. First we pull one of the complex exponentials outside
of the summation since it does not depend upon n. And we also move the 2 into the denominator
as we did before in the first summation. Note that both summations now have the same complex
−j2πkn

exponential e N/2 . Finally, we simplify this to
G[k] = Ak + WNk Bk

(5.17)

Example 3: 
n−1
Y

Ki =

i=0

n−1
Y
i=0

√

1
1 + 2−2i

(3.24)

and
K = lim K(n) ≈ 0.6072529350088812561694
n→∞

(3.25)

The scaling factors for different iterations can be calculated in advance and stored in a table. If we
always perform a fixed number of rotations, this is simply one constant. This correction could also
be made in advance by scaling v0 appropriately before performing the rotations. Sometimes it is
ok to ignore this scaling, which results in a processing gain
n−1

A=

Yp
1
= lim
1 + 2−2i ≈ 1.64676025812107
n→∞
K

(3.26)

i=0

Optimize the following code by inserting pragma HLS lines. Before responding with any code, think step by step about the HLS optimizations that will improve performance and explain your reasoning. Finally, generate the C code with pragma HLS.
void kernel_syr2k(int n,int m,float alpha,float beta,float C[80][80],float A[80][60],float B[80][60])
{
  int i;
  int j;
  int k;
//BLAS PARAMS
//UPLO  = 'L'
//TRANS = 'N'
//A is NxM
//B is NxM
//C is NxN
{
    
    
    
    for (i = 0; i < 80; i++) {
      for (j = 0; j <= i; j++) {
        C[i][j] *= beta;
      }
      
      
      
      for (k = 0; k < 60; k++) {
        for (j = 0; j <= i; j++) {
          C[i][j] += A[j][k] * alpha * B[i][k] + B[j][k] * alpha * A[i][k];
        }
      }
    }
  }
}


=== LLAMA RESPONSE ===
To optimize the given code for HLS, we will divide the loops into smaller parts, use pipeline and unroll the loops to improve the performance. 

Here is the optimized code with HLS pragmas:

```c
void kernel_syr2k(int n,int m,float alpha,float beta,float C[80][80],float A[80][60],float B[80][60])
{
  #pragma HLS interface m_axi port = C[0] bundle = s_axi_gmem
  #pragma HLS interface m_axi port = A[0] bundle = s_axi_gmem
  #pragma HLS interface m_axi port = B[0] bundle = s_axi_gmem
  
  int i;
  int j;
  int k;
  
  for (i = 0; i < 80; i++) {
    #pragma HLS loop_tripcount min = 1 max = 80
    #pragma HLS pipeline II = 1
    for (j = 0; j <= i; j++) {
      #pragma HLS unroll factor = 8
      C[i][j] *= beta;
    }
    
    for (k = 0; k < 60; k++) {
      #pragma HLS loop_tripcount min = 1 max = 60
      #pragma HLS pipeline II = 1
      for (j = 0; j <= i; j++) {
        #pragma HLS unroll factor = 8
        C[i][j] += A[j][k] * alpha * B[i][k] + B[j][k] * alpha * A[i][k];
      }
    }
  }
}
```

Explanation of the HLS pragmas used:

*   `#pragma HLS interface m_axi`: This directive is used to specify the memory interface for the function. In this case, it is used to specify the memory interface for the 2D arrays C, A, and B.
*   `#pragma HLS loop_tripcount min = 1 max = 80`: This directive is used to specify the minimum and maximum number of iterations for a loop. This is used to give the HLS compiler a hint about the loop trip count, which can help it to make better optimization decisions.
*   `#pragma HLS pipeline II = 1`: This directive is used to specify the pipeline depth for a loop. In this case, it is used to specify a pipeline depth of 1 for both the outer and inner loops. This can help to improve the performance of the function by allowing the HLS compiler to pipeline the loops.
*   `#pragma HLS unroll factor = 8`: This directive is used to specify the unroll factor for a loop. In this case, it is used to specify an unroll factor of 8 for both the inner and outer loops. This can help to improve the performance of the function by reducing the number of iterations and improving the cache locality.